// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: rootDir.toString() + '/config.gradle'
apply from: rootDir.toString() + '/build_module.gradle'

buildscript {
    repositories {
        maven { url "https://mirrors.tencent.com/nexus/repository/maven-public/" }
        maven { url "https://mirrors.tencent.com/repository/maven/thirdparty-snapshots/" }
        maven { url "https://dl.bintray.com/bihe0832/android" }
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "com.bihe0832.android:GradleDependenciesCheck:1.1.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50"
        classpath 'com.novoda:bintray-release:0.9.1'
    }
}

task clean(type: Delete) {
    println("clean " + rootProject.buildDir)
    delete rootProject.buildDir
}

allprojects {
    repositories {
        maven { url "https://mirrors.tencent.com/nexus/repository/maven-public/" }
        maven { url "https://mirrors.tencent.com/repository/maven/thirdparty-snapshots/" }
        maven { url "https://dl.bintray.com/bihe0832/android" }
        jcenter()
        flatDir {
            dirs './../libs/'
        }
    }

    afterEvaluate { Project subproject ->
        if (subproject.name == rootProject.name) {
            subproject.getTasks().create("zixiePublishCommand", {
                zixiePublishCommand()
            })
            rootProject.getTasks().getByName('buildEnvironment').doLast {
                System.err.println("组件依赖关系处理中，预计耗时较久，请耐心等待...")
                zixiePublishCommand()
                System.err.println("组件依赖关系处理已完成...")
            }
        }
    }
}


subprojects {
//    apply plugin: 'com.bihe0832.gradleDependenciesCheck'
//
//    GradleDependenciesCheckConfig {
//        showResultType = 1
//        excludePackage = "com.android.support;org.jetbrains.kotlin;android.arch.lifecycle"
//    }

    afterEvaluate { Project subproject ->
        if (zixieIsDebug) println("subprojects afterEvaluate : " + subproject.name)

        if (zixieIsDebug) println("======== Dependencies " + subproject.name + " ========")
        def projectName = subproject.name
        fileTree(dir: rootDir.toString() + '/libs', include: '*.aar').each { File file ->
            def name = file.name.lastIndexOf('.').with {
                it != -1 ? file.name[0..<it] : file.name
            }
            if (zixieIsDebug) println("fileTree dependencies： " + file + "")
            project(':' + projectName).dependencies.add("api", [name: name, ext: 'aar'])
        }

        fileTree(dir: rootDir.toString() + '/libs', include: '*.jar').each { File file ->
            if (zixieIsDebug) println("fileTree dependencies： " + file + "")
            project(':' + projectName).dependencies.add("api", files(file))
        }
        zixieAutoDependencies(projectName, projectName)
        if (zixieIsDebug) println("======== Dependencies " + subproject.name + " ========")

        subproject.getTasks().getByName('clean').doFirst {
            delete "build"
            delete ".externalNativeBuild"
        }
//        subproject.getTasks().getByName('bintrayUpload').dependsOn("build")
    }
}
