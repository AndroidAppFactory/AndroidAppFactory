apply from: rootDir.toString() + '/config.gradle'
apply from: rootDir.toString() + '/dependencies.gradle'

// 检查一个模块当前是否为可开发状态
def checkModuleIsDev(String moduleName) {
    if (zixieIsDebug) println("checkDev:" + moduleName)
    if (zixieModules.contains(moduleName)) {
        if (zixieIsDebug) println("checkDev:" + moduleName + " has dev before")
        return true
    }
    if (moduleName.contains(".")) {
        return false
    }
    boolean moduleIsDev = false
    zixieDevelopModule.split(",").each { projectName ->
        if (moduleName == projectName) {
            if (zixieIsDebug) println("checkDev:" + moduleName + " find from zixieDevelopModule with " + projectName)
            moduleIsDev = true
        }
    }
    if (moduleIsDev) {
        if (zixieIsDebug) println("checkDev:" + moduleName + " is dev true")
        zixieModules.add(moduleName)
        return true
    } else {
        boolean hasChildIsDev = false
        if (zixieIsDebug) println("checkDev:" + moduleName)
        if (zixieModuleInfo[moduleName] != null) {
            zixieModuleInfo[moduleName].get("dependenciesList").each { item ->
                if (!item.contains(".") && checkModuleIsDev(item)) {
                    if (zixieIsDebug) println("checkDev:" + moduleName + " dependencies is dev true")
                    zixieModules.add(moduleName)
                    hasChildIsDev = true
                }
            }
        }
        return hasChildIsDev
    }
}

//依赖管理
ext.tempDependenciesList = new HashMap<String, ArrayList<String>>()
def addToDependencies(String mainModule, String dependenciesModule) {
    if (zixieIsDebug) println("addToDependencies:" + mainModule + " " + dependenciesModule)
    if (!tempDependenciesList.containsKey(mainModule)) {
        tempDependenciesList.put(mainModule, new ArrayList<String>())
    }
    if (!tempDependenciesList.get(mainModule).contains(dependenciesModule)) {
        tempDependenciesList.get(mainModule).add(dependenciesModule)
        if (tempDependenciesList.containsKey(dependenciesModule)) {
            tempDependenciesList.get(dependenciesModule).each { item ->
                addToDependencies(mainModule, item)
            }
        }
    }
}

// 检查 mainModule 是否有依赖 checkedModule
def checkModuleDependenciesOnce(String mainModule, String checkedModule) {
    if (zixieIsDebug) println("checkModuleDependencies:" + mainModule + " " + checkedModule)
    if (tempDependenciesList.containsKey(mainModule)) {
        if (tempDependenciesList.get(mainModule).contains(checkedModule)) {
            return 1
        }
    }

    if (null != zixieModuleInfo[mainModule]) {
        if (zixieModuleInfo[mainModule].get("dependenciesList").contains(checkedModule)) {
            addToDependencies(mainModule, checkedModule)
            return 1
        } else {
            zixieModuleInfo[mainModule].get("dependenciesList").each { item ->
                if (!item.contains(".")) {
                    def result = checkModuleDependenciesOnce(item, checkedModule)
                    if (result > 0) {
                        addToDependencies(item, checkedModule)
                        return result
                    }
                }
            }
        }
    }
    return 0
}

// 检查 moduleA 和 moduleB 是否有依赖关系
def checkModuleDependencies(String moduleA, String moduleB) {
    if (zixieIsDebug) println("checkModuleDependencies:" + moduleA + " " + moduleB)
    if (checkModuleDependenciesOnce(moduleA, moduleB) > 0) {
        return 1
    } else if (checkModuleDependenciesOnce(moduleB, moduleA) > 0) {
        return -1
    } else {
        return 0
    }
}

// 更新组件命令生成
def getPublishCommand() {
    System.err.println("组件依赖关系处理中，预计耗时较久，请耐心等待...\n\n")

    if (zixieIsDebug) println("showCommand")
    def moduleList = []
    zixieModuleInfo.each { projectName, subModuleList ->
        if (!isApplicationModule(projectName) && checkModuleIsDev(projectName)) {
            moduleList.add(projectName)
        }
    }

    if (moduleList.size() > 0) {
        if (zixieIsDebug) System.err.println("showCommand before :" + moduleList)
        for (int i = 0; i < moduleList.size(); i++) {
            for (int j = 0; j < moduleList.size() - 1; j++) {
                if (zixieIsDebug) println("----- showCommand " + i + " " + j)
                if (zixieIsDebug) println("showCommand " + moduleList.get(i) + " " + moduleList.get(j) + " " + (checkModuleDependencies(moduleList.get(i), moduleList.get(j)) < 0))
                if ((checkModuleDependencies(moduleList.get(i), moduleList.get(j)) < 0)) {
                    def temp = moduleList.get(i)
                    if (zixieIsDebug) println("showCommand before:" + moduleList)
                    moduleList.set(i, moduleList.get(j))
                    moduleList.set(j, temp)
                    if (zixieIsDebug) println("showCommand before:" + moduleList)
                } else {
                    if (zixieIsDebug) println("showCommand noting")
                }
                if (zixieIsDebug) println("----- showCommand " + i + " " + j)
            }
        }

        if (zixieIsDebug) System.err.println("showCommand end :" + moduleList)

        def resultList = "\n"
        moduleList.each { item ->
            resultList = resultList + item + "\n"
        }
        System.err.println("\n\n========================================\n\n")
        System.err.println("当前开发的组件开发修改版本号后，直接在根目录运行下面的命令即可发布所有依赖到最新版本\n")
        System.err.println("运行后升级版本的组件有：\n\n\t" + moduleList)
        System.err.println("\n发布使用的命令： \n\n")

        System.err.println("echo \"" + resultList + "\"  | xargs -I {} /bin/bash ./build_upload.sh {} " + zixieVersionName)
        System.err.println("\n\n========================================\n\n")
    } else {
        System.err.println("组件依赖关系处理已完成，没有组件需要更新...")
    }

}

//添加依赖
def addDependencies(String projectName) {
    if (zixieIsDebug) println("======== addDependencies " + projectName + " ========")
    fileTree(dir: rootDir.toString() + '/libs', include: '*.aar').each { File file ->
        if (zixieIsDebug) println("fileTree dependencies： " + file + "")
        addDependenciesOnce(projectName, file.name)
    }

    fileTree(dir: rootDir.toString() + '/libs', include: '*.jar').each { File file ->
        if (zixieIsDebug) println("fileTree dependencies： " + file + "")
        addDependenciesOnce(projectName, rootDir.toString() + '/libs/' + file.name)
    }
    autoDependencies(projectName, projectName)
    if (zixieIsDebug) println("======== addDependencies " + projectName + " ========")
}


//根据依赖添加依赖
def autoDependencies(String projectName, String moduleName) {
    if (zixieIsDebug) println("======== autoDependencies " + projectName + " ========")
    if (zixieIsDebug) println("check " + projectName + " depenciese:" + moduleName)
    if (zixieModuleInfo[moduleName] != null) {
        zixieModuleInfo[moduleName].get("dependenciesList").each { item ->
            if (zixieIsDebug) println(projectName + " addDependenciesOnce:" + item)
            addDependenciesOnce(projectName, item)
            autoDependencies(projectName, item)
        }
    }
    if (zixieIsDebug) println("======== autoDependencies " + projectName + " ========")
    return true
}


def addDependenciesOnce(projectName, String moduleName) {
    String type = ""
    if(null == moduleName || moduleName.trim().length() ==0){
        return
    }
    if (isDebugModule(moduleName)) {
        type = "debugApi"
    } else {
        if (isApplicationModule(projectName)) {
            type = "api"
        } else {
            if(moduleName.endsWith(".jar") || moduleName.endsWith(".aar")){
                type = "compileOnly"
            }else {
                type = "implementation"
            }
        }
    }
    if (zixieIsDebug) println("addDependenciesOnce :  " + projectName + " " + type + " " + moduleName)
    if (moduleName.endsWith(".jar")) {
        project(':' + projectName).dependencies.add(type, files(moduleName))
    } else if (moduleName.endsWith(".aar")) {
        def name = moduleName.lastIndexOf('.').with {
            it != -1 ? moduleName[0..<it] : moduleName
        }
        project(':' + projectName).dependencies.add(type, [name: name, ext: 'aar'])
    } else if (moduleName.contains(":")) {
        project(':' + projectName).dependencies.add(type, moduleName)
    } else if (checkModuleIsDev(moduleName)) {
        project(':' + projectName).dependencies.add(type, project(':' + moduleName + ''))
    } else {
        if (moduleName.contains(":")) {
            project(':' + projectName).dependencies.add(type, moduleName)
        } else {
	    //project(':' + projectName).dependencies.add(type, [name: moduleName + "-release", ext: 'aar'])
            if (null != zixieModuleInfo[moduleName]) {
                project(':' + projectName).dependencies.add(type, zixieGroupId + ":" + zixieModuleInfo[moduleName].get("artifactId") + ":" + zixieModuleInfo[moduleName].get("version"))
            }
        }
    }
}

def isApplicationModule(String projectName) {
    return projectName == "APPTest"
}

def isDebugModule(String projectName) {
    return false
}

ext {
    zixieMainProject = ext.mainProject
    zixieDevelopModule = ext.developModule
    zixieRepoName = "android"
    zixieUserOrg = 'bihe0832'
    zixieGroupId = "com.bihe0832.android"
    zixieLicences = ""
    zixieVersionCode = Integer.parseInt(['sh', '-c', 'git rev-list --all --count'].execute().text.trim())
    zixieVersionName = ext.moduleVersionName
    zixieModuleInfo = ext.moduleInfo
    zixieModules = new ArrayList<>()
    zixieIncludeList = new ArrayList<>()
    zixieIsDebug = false
    zixieIncludeALL = includeALLDependOnDevelopModule
    zixiePublishCommand = this.&getPublishCommand
    zixieAutoDependencies = this.&addDependencies
    zixieCheckModuleIsDev = this.&checkModuleIsDev
}
